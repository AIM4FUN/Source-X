[uokr_infos.txt]
UO:KR uses DES-EDE3 (Triple-DES EDE encryption/decryption) for Network Encryption.


This file contains some instructions for using Crypto++ 5.5.1, which may or may not be accurate. :P

1. First we need an array of bytes that needs to be decrypted and an array to hold the result:

	byte oldPacket[65] = {	0x99, 0xaf, 0x93, 0x6c, 0x0e, 0x4e, 0xca, 0x14, 0x10, 0xd5,
				0x2f, 0xaa, 0x7b, 0x10, 0x17, 0x22, 0x1a, 0xd6, 0xf5, 0x6d,
				0xc5, 0x90, 0x2d, 0x55, 0x1a, 0x39, 0xa1, 0x25, 0x6e, 0xbb,
				0xe5, 0x4b, 0x98, 0x4e, 0xb8, 0x47, 0x27, 0xae, 0x9c, 0x6a,
				0xa4, 0xe8, 0xf4, 0x8a, 0xb8, 0xbd, 0x6a, 0x1f, 0xe5, 0x62,
				0x6e, 0x8f, 0x7b, 0x73, 0x4d, 0x17, 0xff, 0x22,	0xe3, 0x5e,
				0x4d, 0xba, 0xb5, 0x37, 0x9a };
	byte newPacket[65];


2. Next, we need 3 keys. Crypto++ will only accept a 24-byte key (3 8-byte keys).

	byte key[24] = { 0x78, 0x13, 0xb7, 0x7b, 0xce, 0xa8, 0xd7, 0xbc, 0x52, 0xde, 0x38, 0x30, 0xea, 0xe9, 0x1e, 0xa3, 0x5a, 0xce, 0x3e, 0xe3, 0x97, 0x92, 0xe4, 0x8a};


3. Before we can decrypt, we need a decryption object and set the key. UOKR is using DES_EDE3 so we create our decryption object like this:

	DES_EDE3::Decryption desDecrypt;
	desDecrypt.SetKey(key, sizeof(key));


4. To actually decrypt the data, we simply need to do this (this step may not be correct):

	desDecrypt.ProcessBlock(oldPacket, newPacket);


5. After this, newPacket should contain the decrypted data.

